// Generated by CoffeeScript 1.3.1
(function() {
  var __slice = [].slice;

  this.before = function(decoration) {
    return function(base) {
      return function() {
        decoration.apply(this, arguments);
        return base.apply(this, arguments);
      };
    };
  };

  this.after = function(decoration) {
    return function(base) {
      return function() {
        var __value__;
        decoration.call(this, __value__ = base.apply(this, arguments));
        return __value__;
      };
    };
  };

  this.around = function(decoration) {
    return function(base) {
      return function() {
        var argv, callback, __value__,
          _this = this;
        argv = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        __value__ = void 0;
        callback = function() {
          return __value__ = base.apply(_this, argv);
        };
        decoration.apply(this, [callback].concat(argv));
        return __value__;
      };
    };
  };

  this.provided = function(condition) {
    return function(base) {
      return function() {
        if (condition.apply(this, arguments)) {
          return base.apply(this, arguments);
        }
      };
    };
  };

  this.retry = function(times) {
    return function(base) {
      return function() {
        if (!(times >= 0)) {
          return;
        }
        while (true) {
          try {
            return base.apply(this, arguments);
          } catch (error) {
            if (!((times -= 1) >= 0)) {
              throw error;
            }
          }
        }
      };
    };
  };

  this.precondition = function(throwable, condition) {
    if (!condition) {
      (condition = throwable) && (throwable = 'Failed precondition');
    }
    return this.before(function() {
      if (!condition.apply(this, arguments)) {
        throw throwable;
      }
    });
  };

  this.postcondition = function(throwable, condition) {
    if (!condition) {
      (condition = throwable) && (throwable = 'Failed postcondition');
    }
    return this.after(function() {
      if (!condition.apply(this, arguments)) {
        throw throwable;
      }
    });
  };

}).call(this);
